# org: freddieentity
# app: stories
service: stories

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    STORIES_TABLE: StoriesTable-${self:provider.stage}
    STORIES_TIMESTAMP_INDEX: TimestampIndex
    STORY_IMAGE_S3_BUCKET: story-images-816436131251-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_JWKS_URL: https://dev-tp1uyfva.au.auth0.com/.well-known/jwks.json

  # logs:
  #   # Enable API Gateway logs
  #   restApi: true

  iamRoleStatements:
    - ${file(iam/ObservabilityIAM.yml):XRayCommon}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetStories:
    handler: src/lambda/http/getStories.handler
    events:
      - http:
          method: get
          path: stories
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/StoriesTableIAM.yml):GetStories}

  CreateStory:
    handler: src/lambda/http/createStory.handler
    events:
      - http:
          method: post
          path: stories
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validators/create-story-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/StoriesTableIAM.yml):CreateStory}


  UpdateStory:
    handler: src/lambda/http/updateStory.handler
    events:
      - http:
          method: patch
          path: stories/{storyId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/validators/update-story-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/StoriesTableIAM.yml):UpdateStory}


  DeleteStory:
    handler: src/lambda/http/deleteStory.handler
    events:
      - http:
          method: delete
          path: stories/{storyId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/StoriesTableIAM.yml):DeleteStory}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: stories/{storyId}/image
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - ${file(iam/StoriesTableIAM.yml):UpdateStory}
      - ${file(iam/StoryImagesBucketIAM.yml):GenerateUploadUrl}

resources:
  Resources:
    GatewayResponseDefault4XX: ${file(resources/GatewayResponseDefault.yml):GatewayResponseDefault4XX}
    StoriesTable: ${file(resources/StoriesTable.yml):StoriesTable}
    StoryImagesBucket: ${file(resources/StoryImagesBucket.yml):StoryImagesBucket}
    BucketPolicy: ${file(resources/StoryImagesBucket.yml):BucketPolicy}
    
custom:
  StoriesTable:
    name: !Ref StoriesTable
    arn: !GetAtt StoriesTable.Arn
