# org: freddieentity
# app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: TodosTable-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-816436131251-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_JWKS_URL: https://dev-tp1uyfva.au.auth0.com/.well-known/jwks.json

  # logs:
  #   # Enable API Gateway logs
  #   restApi: true

  iamRoleStatements:
    - ${file(iam/ObservabilityIAM.yml):XRayCommon}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/TodosTableIAM.yml):GetTodos}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validators/create-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/TodosTableIAM.yml):CreateTodo}


  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/validators/update-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/TodosTableIAM.yml):UpdateTodo}


  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements: 
      - ${file(iam/TodosTableIAM.yml):DeleteTodo}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - ${file(iam/TodosTableIAM.yml):UpdateTodo}
      - ${file(iam/AttachmentsBucketIAM.yml):GenerateUploadUrl}

resources:
  Resources:
    GatewayResponseDefault4XX: ${file(resources/GatewayResponseDefault.yml):GatewayResponseDefault4XX}
    TodosTable: ${file(resources/TodosTable.yml):TodosTable}
    AttachmentsBucket: ${file(resources/AttachmentsBucket.yml):AttachmentsBucket}
    BucketPolicy: ${file(resources/AttachmentsBucket.yml):BucketPolicy}
    
custom:
  TodosTable:
    name: !Ref TodosTable
    arn: !GetAtt TodosTable.Arn
  # Auth: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
